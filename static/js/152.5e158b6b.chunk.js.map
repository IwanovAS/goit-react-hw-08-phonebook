{"version":3,"file":"static/js/152.5e158b6b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","redux/conttacts/contactsSelector.js","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/contactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"addBtn\":\"ContactForm_addBtn__CACuJ\"};","import { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactAdd } from 'redux/conttacts/contactsSlice';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const isUniqueContact = (userName, userNumber) => {\n    const isExistContact = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === userName.toLowerCase() &&\n        contact.number === userNumber\n    );\n    if (isExistContact) {\n      Notify.failure('Contact is already exist');\n      return false;\n    }\n    return true;\n  };\n\n  const handleInputChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handleInputChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    if (!isUniqueContact(name, number)) {\n      return;\n    }\n    dispatch(\n      contactAdd({\n        id: nanoid(),\n        name,\n        number,\n      })\n    );\n\n    Notify.success('The contact was added to phonebook');\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleFormSubmit}>\n      <label className={css.label} htmlFor=\"name\">\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Kurt Cobain\"\n          value={name}\n          onChange={handleInputChangeName}\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"The name can only consist of letters, an apostrophe, spaces. For example Adrian, Jacob Mercer.\"\n          required\n        />\n      </label>\n      <label className={css.label} htmlFor=\"number\">\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"123-45-67\"\n          value={number}\n          onChange={handleInputChangeNumber}\n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"The phone number must consist of numbers and can contain spaces, dashes, parentheses and can begin with +\"\n          required\n        />\n      </label>\n\n      <button className={css.addBtn} type=\"submit\">\n        <span>Add contact</span>\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactListItem_listItem__upGA2\",\"listItemText\":\"ContactListItem_listItemText__vCiNZ\",\"deleteBtn\":\"ContactListItem_deleteBtn__roUYm\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport css from './ContactListItem.module.css';\nimport { contactDelete } from 'redux/conttacts/contactsSlice';\nimport { selectVisibleContacts } from 'redux/conttacts/contactsSelector';\n\nexport const ContactListItem = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectVisibleContacts);\n\n  const handleRemoveContact = id => {\n    dispatch(contactDelete(id));\n    Notify.success('The contact was deleted');\n  };\n\n  return (\n    <ul>\n      {filter.map(contact => {\n        const { id, name, number } = contact;\n        return (\n          <li className={css.listItem} key={id}>\n            <span className={css.listItemText}>{name}:</span>\n            <span className={css.listItemText}>{number}</span>\n            <button\n              className={css.deleteBtn}\n              type=\"button\"\n              onClick={() => handleRemoveContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/conttacts/contactsSlice';\nimport css from './Filter.module.css'\nimport { selectFilter } from 'redux/conttacts/contactsSelector';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <label className={css.filterLabel}>\n      Find contacts by name\n      <input\n      className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={handleFilterChange}\n        placeholder=\"Enter name for Search\"\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport Filter from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { contactsFetch } from 'redux/conttacts/contactsSlice';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsFetch());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactListItem />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["dispatch","useDispatch","contacts","useSelector","state","items","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","_jsxs","className","css","onSubmit","e","userName","userNumber","preventDefault","some","contact","toLowerCase","Notify","contactAdd","id","nanoid","children","htmlFor","_jsx","type","placeholder","value","onChange","target","title","required","selectFilter","filter","selectVisibleContacts","createSelector","includes","map","onClick","contactDelete","handleRemoveContact","filterValue","setFilter","useEffect","contactsFetch","_Fragment","ContactForm","Filter","ContactListItem"],"sourceRoot":""}